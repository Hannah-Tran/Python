#  PRACTICE OPPORTUNITY
# Assume that we have 3 clients who invested the following amounts in stocks earning 8% annually:** 
# client_investments = [\\$400,000  \\$45,000   \\$60,000]**     
# Complete the following tasks:**
# 1. Write a For loop that iterates over each element in the "client_investments" List, calculates the annual returns and places the results in another list named "client_returns"** 
# 2. Repeat the same operation using List Comprehension**
# 3. Compare the results from step 1 and 2 and perform a sanity check**

# Define a Python List
client_investments = [400000, 45000, 60000]
 
# Define a variable that holds the returns 
returns = 0.08 
7
# Let's define another empty List named "client_returns" to store the output 
client_returns = []
 
# Now we will create a For loop that goes over every element in the input List, 
# calculates the annual returns and places the results in another List named "client_returns"
for x in client_investments:
    client_returns.append(x * returns)
 
print(client_returns)
8
# Repeat the same excercise using List Comprehension
client_returns_list_comp = [ x * returns for x in client_investments]
client_returns_list_comp
9
# Assertions are statements that are used for code debugging and for performing sanity checks 
# Assertions are used to check if some condition is held True 
assert client_returns == client_returns_list_comp

# Let's define a Python function that multiplies two inputs
def multiply(x, y):
    z = x * y
# Call the Python function 
multiply(2, 5)
# Let's see how to leverage Lambda functions to peform the same operation 
# Lambda expression is represented as follows:
z = lambda x, y : x * y
# Lambda function call
z(2, 5)
# Let's explore some Python built-in functions
# Let's define a Python List
company_revenue = [600000, 900000, 1000000, 1100000, 1500000]

# Let's obtain the the number of companies available in our Python List using the len() Built-in Function 
len(company_revenue)
# The max() function is used to find the maximum value in a given Python List
max(company_revenue)
# The min() function is used to find the minimum value in a given Python List
min(company_revenue)


#PRACTICE OPPORTUNITY SOLUTION:

#1. Define a Lambda function that calculates the effective interest rate given the annual interest rate and the number of compounding periods.
#2. Assume you deposited $10,000 today into an account paying 6% compounded monthly, what is the expected effective rate of return?
#3. How much interest would you have earned by the end of the year?
#Hint: effective_rate = ((1 + (interest/period per year)) ^ period per year) - 1

# Let's leverage Lambda functions to calculate the effective annual interest rate 
effective_interest_rate = lambda interest, period: ((1 + (interest/period)) ** period) - 1

# Lambda function call
effective_rate = effective_interest_rate(0.06, 12)
print('The effective annual interest rate = {}%'.format(effective_rate * 100))

# Let's calculate the total interest earned on the invested $10,000 by the end of year 1
amount_0 = 10000 # amount at year 0 (now!)
print('The total interest earned by the end of year 1 = ${}'.format(effective_rate * amount_0)) 


name = input("Welcome to the foreign currency exchange office, please enter your name: ")
amount_SGD = input("Enter the amount you want to exchange: ")

USD_SGD = 1.34
NZD_USD = 0.62


# You will need to You will need to calculate the NZD/SGD cross-rate which is NZD/USD × USD/SGD = 0.62 × 1.34 = 0.8308
NZD_SGD = NZD_USD * USD_SGD
amount_NZD = int(amount_SGD) / NZD_SGD
print("Welcome {} to our office, the amount you want to exchange is SGD ${} which will be converted to NZD ${}".format(name, amount_SGD, amount_NZD))
